from torch.utils.data import DataLoader
from matplotlib import pyplot as plt
import pandas as pd

from T2M_GPT_lightning.models_wrapper.vqvae_wrapper import HumanVQVAEWrapper as VQVAEModel
from T2M_GPT_lightning.dataset.toy_vq_vae_dataset import ToyDataset
from T2M_GPT.options import option_vq

from lightning.pytorch import Trainer
from lightning.pytorch.loggers import CSVLogger

# Get the arguments
args_parser = option_vq.get_args_parser()
args_parser.add_argument("--is-toy", action="store_true", help="whether to run the model on toy data")
args_parser.add_argument("--nb-joints", type=int, default=150, help="number of joints in the dataset")
args_parser.add_argument("--max-epochs", type=int, default=2500, help="number of epochs to train the model")
args_parser.add_argument("--save-path", type=str, default="vq_vae_model.pth", help="path to save the model")
args_parser.add_argument(
    "--toy-data-path", type=str, default="./data/toy_data/train.skels", help="path to the toy data"
)

# Parse the arguments
args = args_parser.parse_args()

# Initialize the model
if args.resume_pth is not None:
    model = VQVAEModel.load_from_checkpoint(args.resume_pth, args=args)
else:
    model = VQVAEModel(args)

# Initialize the dataset
if args.is_toy:
    train_dataset = ToyDataset(window_size=args.window_size, dataset_size=50, joint_size=args.nb_joints)
    test_dataset = ToyDataset(window_size=args.window_size, dataset_size=10, joint_size=args.nb_joints)
else:
    assert False, "Non-toy trainer is implemented yet"

# Initialize the dataloaders
train_loader = DataLoader(train_dataset, batch_size=args.batch_size, shuffle=True)
test_loader = DataLoader(test_dataset, batch_size=args.batch_size, shuffle=False)

# Initialize the logger
csv_logger = CSVLogger("logs", name="vq_vae")

# Initialize the trainer
trainer = Trainer(log_every_n_steps=10, max_epochs=args.max_epochs, logger=csv_logger)

# Train the model
trainer.fit(model, train_loader, test_loader)

# Save the model
trainer.save_checkpoint(args.save_path)

# Get logging path
logging_path = model.logger.log_dir
# Read csv file
df = pd.read_csv(logging_path + "/metrics.csv")
# Plot the loss
plt.title("Train Loss")
plt.plot(df.loc[df["train_loss"].notnull(), "train_loss"])
plt.xlabel("Epoch")
plt.ylabel("Loss")

plt.show()
